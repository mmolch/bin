#!/bin/bash

if ! tty -s; then
    EPUB_OPTIMIZE_SPAWNED_TERMINAL="1" \
    gnome-terminal --title="EPUB Optimize" --window --wait -- "${BASH_SOURCE}" "${@}"
    exit
fi

for FIL in "$@"; do
    if [ ! -f "${FIL}" ]; then
        echo "epub_optimize | FILe doesn't exist: ${FIL}"
        continue
    fi

    MIMETYPE=$(mimetype -b "${FIL}")
    if [ "${MIMETYPE}" != 'application/epub+zip' ]; then
        echo "epub_optimize | Doesn't seem to be an epub: ${FIL}"
        continue
    fi

    FULLPATH=$(readlink -f "${FIL}")
    OUTPATH="${FULLPATH%.*}.epub"

    (
        TMPDIR=$(mktemp -d '/tmp/epub_optimize.XXXXXXXX')
        cd "${TMPDIR}"

        echo -n "[Extracting] ... "
        unzip -q "${FULLPATH}"

        chmod -R ugo+rw .

        echo -ne "\r                 \r[Scaling images] ... "
        while IFS= read -r IMAGEFILE; do
            [ -z "${IMAGEFILE}" ] && continue

            #echo "Scaling image (JPG): ${IMAGEFILE}"
            convert "${IMAGEFILE}" -scale '480x640>' -quality 75 "${IMAGEFILE}" 2>/dev/null
        done<<<$(find . \( -name '*.jpg' -o -name '*.JPG' -o -name '*.jpeg' -o -name '*.JPEG' \))

        while IFS= read -r IMAGEFILE; do
            [ -z "${IMAGEFILE}" ] && continue

            #echo "Scaling image (PNG): ${IMAGEFILE%.*}.jpg"
            convert "${IMAGEFILE}" -scale '480x640>' -quality 75 "${IMAGEFILE%.*}.jpg" 2>/dev/null
            mv "${IMAGEFILE%.*}.jpg" "${IMAGEFILE}"
        done<<<$(find . \( -name '*.png' -o -name '*.PNG' \))

        while IFS= read -r OPFFILE; do
            [ -z "${OPFFILE}" ] && continue
            
            echo -ne "\r                      \r[Optimizing OPF] ... "
            #echo "Optimizing OPF: ${OPFFILE}"
            sed -e 's/image\/png/image\/jpeg/g' <${OPFFILE} > "${OPFFILE}.xml"

            COVER_IMAGE=$(xmlstarlet select -N n='http://www.idpf.org/2007/opf' -N dc='http://purl.org/dc/elements/1.1/' -t -v 'n:package/n:metadata/n:meta[@name="cover"]/@content' "${OPFFILE}.xml" | head -n 1)
            #TITLE=$(xmlstarlet select -N n='http://www.idpf.org/2007/opf' -N dc='http://purl.org/dc/elements/1.1/' -t -v 'n:package/n:metadata/dc:title' "${OPFFILE}.xml" | head -n 1)
            #AUTHOR=$(xmlstarlet select -N n='http://www.idpf.org/2007/opf' -N dc='http://purl.org/dc/elements/1.1/' -t -v 'n:package/n:metadata/dc:creator' "${OPFFILE}.xml" | head -n 1)
            #OUTPATH="${FULLPATH%/*}/out/${AUTHOR//\/} - ${TITLE//\/}.epub"

            TITLE=${FIL%.*}
            AUTHOR="Light Novels"
            OUTPATH="${FULLPATH%/*}/out/${TITLE}.epub"

            xml ed -N n='http://www.idpf.org/2007/opf' -N dc='http://purl.org/dc/elements/1.1/' --delete '/n:package/n:metadata/*' "${OPFFILE}.xml" \
            | xml ed -N n='http://www.idpf.org/2007/opf' -N dc='http://purl.org/dc/elements/1.1/' --subnode '/n:package/n:metadata' -t elem -n 'dc:title' -v "${TITLE}" \
            | xml ed -N n='http://www.idpf.org/2007/opf' -N dc='http://purl.org/dc/elements/1.1/' --subnode '/n:package/n:metadata' -t elem -n 'dc:creator' -v "${AUTHOR}" \
            | xml ed -N n='http://www.idpf.org/2007/opf' -N dc='http://purl.org/dc/elements/1.1/' --subnode '/n:package/n:metadata' -t elem -n "meta name=\"cover\" content=\"${COVER_IMAGE}\"" > "${OPFFILE}"

            rm "${OPFFILE}.xml"
        done<<<$(find . \( -name '*.opf' -o -name '*.OPF' \))

        #N
        #read xxxxx
        echo -ne "\r                     \r[Packing] ... "
        #echo "Packing: ${OUTPATH##*/}"
        [ ! -d "${OUTPATH%/*}" ] && mkdir -p "${OUTPATH%/*}"
        [ -f "${OUTPATH}" ] && rm "${OUTPATH}"
        zip -q -r -9 "${OUTPATH}" *
        cd
        rm -rf "${TMPDIR}"
        echo -ne "\r              \r${OUTPATH##*/}\n"
    )
    
done

if [ -n "${EPUB_OPTIMIZE_SPAWNED_TERMINAL}" ]; then
    echo -e "\e[33;1;32mPress enter to close the window\e[33;0;37m"
    read xxx
fi
